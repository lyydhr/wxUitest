function _typeof(obj) {
    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
        };
    }
    return _typeof(obj);
}

var Promise = require('./Promise');
var restArgs = require('./restArgs');
var uniqId = require('./uniqId');
var toSrc = require('./toSrc');
var createUrl = require('./createUrl');
var isStr = require('./isStr');

exports = function exports(fn) {
    var promises = {};
    var src = [
        toSrc(isPromise),
        'onmessage=(',
        toSrc(function(fn) {
            return function(e) {
                var data = e.data,
                    id = data[0],
                    args = data[1],
                    value;

                try {
                    value = fn.apply(fn, args);

                    if (isPromise(value)) {
                        value.then(
                            function(value) {
                                postMessage([id, null, value]);
                            },
                            function(err) {
                                postMessage([id, err.message]);
                            }
                        );
                    } else {
                        postMessage([id, null, value]);
                    }
                } catch (e) {
                    postMessage([id, e.message]);
                }
            };
        }),
        ')(' + toSrc(fn) + ')'
    ].join('\n');
    var worker = new Worker(createUrl(src));

    worker.onmessage = function(e) {
        var data = e.data,
            id = data[0],
            err = data[1],
            value = data[2];
        if (isStr(err)) err = new Error(err);
        promises[id](err, value);
        delete promises[id];
    };

    return restArgs(function(args) {
        var id = uniqId('workerize');
        return new Promise(function(resolve, reject) {
            promises[id] = function(err, value) {
                if (err) return reject(err);
                resolve(value);
            };

            worker.postMessage([id, args]);
        });
    });
};

function isPromise(val) {
    return (
        !!val &&
        (_typeof(val) === 'object' || typeof val === 'function') &&
        typeof val.then === 'function'
    );
}

module.exports = exports;
