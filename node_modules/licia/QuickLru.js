function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}

var isUndef = require('./isUndef');

exports = (function() {
    function QuickLru(max) {
        _classCallCheck(this, QuickLru);

        this._max = max;
        this._cache = {};
        this._oldCache = {};
        this._size = 0;
    }

    _createClass(QuickLru, [
        {
            key: 'has',
            value: function has(key) {
                return (
                    !isUndef(this._cache[key]) || !isUndef(this._oldCache[key])
                );
            }
        },
        {
            key: 'remove',
            value: function remove(key) {
                if (!isUndef(this._cache[key])) this._cache[key] = undefined;
                if (!isUndef(this._oldCache[key]))
                    this._oldCache[key] = undefined;
            }
        },
        {
            key: 'get',
            value: function get(key) {
                if (!isUndef(this._cache[key])) {
                    return this._cache[key];
                }

                var val = this._oldCache[key];

                if (!isUndef(val)) {
                    this._update(key, val);

                    return val;
                }
            }
        },
        {
            key: 'set',
            value: function set(key, val) {
                if (!isUndef(this._cache[key])) {
                    this._cache[key] = val;
                } else {
                    this._update(key, val);
                }
            }
        },
        {
            key: 'clear',
            value: function clear() {
                this._cache = {};
                this._oldCache = {};
            }
        },
        {
            key: '_update',
            value: function _update(key, val) {
                this._cache[key] = val;
                this._size++;

                if (this._size > this._max) {
                    this._size = 0;
                    this._oldCache = this._cache;
                    this._cache = {};
                }
            }
        }
    ]);

    return QuickLru;
})();

module.exports = exports;
