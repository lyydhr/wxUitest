var isFn = require('./isFn');
var noop = require('./noop');
var defaults = require('./defaults');
var isObj = require('./isObj');
var query = require('./query');

exports = (function(_exports) {
    function exports(_x) {
        return _exports.apply(this, arguments);
    }

    exports.toString = function() {
        return _exports.toString();
    };

    return exports;
})(function(options) {
    defaults(options, exports.setting);
    var type = options.type,
        url = options.url,
        data = options.data,
        dataType = options.dataType,
        success = options.success,
        error = options.error,
        timeout = options.timeout,
        complete = options.complete,
        xhr = options.xhr(),
        abortTimeout;

    xhr.onreadystatechange = function() {
        if (xhr.readyState !== 4) return;
        clearTimeout(abortTimeout);
        var result;
        var status = xhr.status;

        if ((status >= 200 && status < 300) || status === 304) {
            result = xhr.responseText;
            if (dataType === 'xml') result = xhr.responseXML;

            try {
                if (dataType === 'json') result = JSON.parse(result);
            } catch (e) {}

            success(result, xhr);
        } else {
            error(xhr);
        }

        complete(xhr);
    };

    if (type === 'GET') {
        data = query.stringify(data);
        url += url.indexOf('?') > -1 ? '&' + data : '?' + data;
    } else if (options.contentType === 'application/x-www-form-urlencoded') {
        if (isObj(data)) data = query.stringify(data);
    } else if (options.contentType === 'application/json') {
        if (isObj(data)) data = JSON.stringify(data);
    }

    xhr.open(type, url, true);
    xhr.setRequestHeader('Content-Type', options.contentType);

    if (timeout > 0) {
        abortTimeout = setTimeout(function() {
            xhr.onreadystatechange = noop;
            xhr.abort();
            error(xhr, 'timeout');
            complete(xhr);
        }, timeout);
    }

    xhr.send(type === 'GET' ? null : data);
    return xhr;
});

exports.setting = {
    type: 'GET',
    success: noop,
    error: noop,
    complete: noop,
    dataType: 'json',
    contentType: 'application/x-www-form-urlencoded',
    data: {},
    xhr: function xhr() {
        return new XMLHttpRequest();
    },
    timeout: 0
};

exports.get = function() {
    return exports(parseArgs.apply(null, arguments));
};

exports.post = function() {
    var options = parseArgs.apply(null, arguments);
    options.type = 'POST';
    return exports(options);
};

function parseArgs(url, data, success, dataType) {
    if (isFn(data)) {
        dataType = success;
        success = data;
        data = {};
    }

    return {
        url: url,
        data: data,
        success: success,
        dataType: dataType
    };
}

module.exports = exports;
