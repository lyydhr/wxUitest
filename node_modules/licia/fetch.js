var Promise = require('./Promise');
var each = require('./each');
var defaults = require('./defaults');
var noop = require('./noop');

exports = (function(_exports) {
    function exports(_x, _x2) {
        return _exports.apply(this, arguments);
    }

    exports.toString = function() {
        return _exports.toString();
    };

    return exports;
})(function(url, options) {
    options = options || {};
    defaults(options, exports.setting);
    return new Promise(function(resolve, reject) {
        var xhr = options.xhr(),
            headers = options.headers,
            body = options.body,
            timeout = options.timeout,
            abortTimer;
        xhr.withCredentials = options.credentials == 'include';

        xhr.onload = function() {
            clearTimeout(abortTimer);
            resolve(getRes(xhr));
        };

        xhr.onerror = reject;
        xhr.open(options.method, url, true);
        each(headers, function(val, key) {
            xhr.setRequestHeader(key, val);
        });

        if (timeout > 0) {
            setTimeout(function() {
                xhr.onload = noop;
                xhr.abort();
                reject(Error('timeout'));
            }, timeout);
        }

        xhr.send(body);
    });
});

var regHeaders = /^(.*?):\s*([\s\S]*?)$/gm;

function getRes(xhr) {
    var _keys = [],
        all = [],
        headers = {},
        header;
    xhr.getAllResponseHeaders().replace(regHeaders, function(m, key, val) {
        key = key.toLowerCase();

        _keys.push(key);

        all.push([key, val]);
        header = headers[key];
        headers[key] = header ? header + ',' + val : val;
    });
    return {
        ok: xhr.status >= 200 && xhr.status < 400,
        status: xhr.status,
        statusText: xhr.statusText,
        url: xhr.responseURL,
        clone: function clone() {
            return getRes(xhr);
        },
        text: function text() {
            return Promise.resolve(xhr.responseText);
        },
        json: function json() {
            return Promise.resolve(xhr.responseText).then(JSON.parse);
        },
        xml: function xml() {
            return Promise.resolve(xhr.responseXML);
        },
        blob: function blob() {
            return Promise.resolve(new Blob([xhr.response]));
        },
        headers: {
            keys: function keys() {
                return _keys;
            },
            entries: function entries() {
                return all;
            },
            get: function get(name) {
                return headers[name.toLowerCase()];
            },
            has: (function(_has) {
                function has(_x3) {
                    return _has.apply(this, arguments);
                }

                has.toString = function() {
                    return _has.toString();
                };

                return has;
            })(function(name) {
                return has(headers, name);
            })
        }
    };
}

exports.setting = {
    method: 'GET',
    headers: {},
    timeout: 0,
    xhr: function xhr() {
        return new XMLHttpRequest();
    }
};

module.exports = exports;
