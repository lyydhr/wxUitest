var Emitter = require('./Emitter');
var State = require('./State');
var easing = require('./easing');
var now = require('./now');
var each = require('./each');
var raf = require('./raf');
var isFn = require('./isFn');

exports = Emitter.extend({
    className: 'Tween',
    initialize: function initialize(target) {
        this.callSuper(Emitter, 'initialize', arguments);
        this._target = target;
        this._dest = {};
        this._duration = 0;
        this._progress = 0;
        this._origin = {};
        this._diff = {};
        this._ease = easing['linear'];
        this._state = new State('pause', {
            play: {
                from: 'pause',
                to: 'play'
            },
            pause: {
                from: 'play',
                to: 'pause'
            }
        });
    },
    to: function to(props, duration, ease) {
        var origin = {},
            target = this._target,
            diff = {};
        ease = ease || this._ease;
        this._dest = props;
        this._duration = duration || this._duration;
        this._ease = isFn(ease) ? ease : easing[ease];
        each(props, function(val, key) {
            origin[key] = target[key];
            diff[key] = val - origin[key];
        });
        this._origin = origin;
        this._diff = diff;
        return this;
    },
    progress: function progress(_progress) {
        var ease = this._ease,
            target = this._target,
            origin = this._origin,
            diff = this._diff,
            dest = this._dest,
            self = this;

        if (_progress != null) {
            _progress = _progress < 1 ? _progress : 1;
            this._progress = _progress;
            each(dest, function(val, key) {
                target[key] = origin[key] + diff[key] * ease(_progress);
            });
            self.emit('update', target);
            return this;
        }

        return this._progress;
    },
    play: function play() {
        var state = this._state;
        if (state.is('play')) return;
        state.play();
        var startTime = now(),
            progress = this._progress,
            duration = this._duration * (1 - progress),
            target = this._target,
            self = this;

        function render() {
            if (state.is('pause')) return;
            var time = now();
            self.progress(progress + (time - startTime) / duration);

            if (self._progress === 1) {
                state.pause();
                self.emit('end', target);
                return;
            }

            raf(render);
        }

        raf(render);
        return this;
    },
    pause: function pause() {
        var state = this._state;
        if (state.is('pause')) return;
        state.pause();
        return this;
    },
    paused: function paused() {
        return this._state.is('pause');
    }
});

module.exports = exports;
