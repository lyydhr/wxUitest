var Select = require('./Select');
var $offset = require('./$offset');
var $show = require('./$show');
var $css = require('./$css');
var $attr = require('./$attr');
var $property = require('./$property');
var last = require('./last');
var $remove = require('./$remove');
var $data = require('./$data');
var $event = require('./$event');
var $class = require('./$class');
var $insert = require('./$insert');
var isUndef = require('./isUndef');
var isStr = require('./isStr');

exports = function exports(selector) {
    return new Select(selector);
};

Select.methods({
    offset: function offset() {
        return $offset(this);
    },
    hide: function hide() {
        return this.css('display', 'none');
    },
    show: function show() {
        $show(this);
        return this;
    },
    first: function first() {
        return exports(this[0]);
    },
    last: (function(_last) {
        function last() {
            return _last.apply(this, arguments);
        }

        last.toString = function() {
            return _last.toString();
        };

        return last;
    })(function() {
        return exports(last(this));
    }),
    get: function get(idx) {
        return this[idx];
    },
    eq: function eq(idx) {
        return exports(this[idx]);
    },
    on: function on(event, selector, handler) {
        $event.on(this, event, selector, handler);
        return this;
    },
    off: function off(event, selector, handler) {
        $event.off(this, event, selector, handler);
        return this;
    },
    html: function html(val) {
        var result = $property.html(this, val);
        if (isUndef(val)) return result;
        return this;
    },
    text: function text(val) {
        var result = $property.text(this, val);
        if (isUndef(val)) return result;
        return this;
    },
    val: function val(_val) {
        var result = $property.val(this, _val);
        if (isUndef(_val)) return result;
        return this;
    },
    css: function css(name, val) {
        var result = $css(this, name, val);
        if (isGetter(name, val)) return result;
        return this;
    },
    attr: function attr(name, val) {
        var result = $attr(this, name, val);
        if (isGetter(name, val)) return result;
        return this;
    },
    data: function data(name, val) {
        var result = $data(this, name, val);
        if (isGetter(name, val)) return result;
        return this;
    },
    rmAttr: function rmAttr(name) {
        $attr.remove(this, name);
        return this;
    },
    remove: function remove() {
        $remove(this);
        return this;
    },
    addClass: function addClass(name) {
        $class.add(this, name);
        return this;
    },
    rmClass: function rmClass(name) {
        $class.remove(this, name);
        return this;
    },
    toggleClass: function toggleClass(name) {
        $class.toggle(this, name);
        return this;
    },
    hasClass: function hasClass(name) {
        return $class.has(this, name);
    },
    parent: function parent() {
        return exports(this[0].parentNode);
    },
    append: function append(val) {
        $insert.append(this, val);
        return this;
    },
    prepend: function prepend(val) {
        $insert.prepend(this, val);
        return this;
    },
    before: function before(val) {
        $insert.before(this, val);
        return this;
    },
    after: function after(val) {
        $insert.after(this, val);
        return this;
    }
});

function isGetter(name, val) {
    return isUndef(val) && isStr(name);
}

module.exports = exports;
