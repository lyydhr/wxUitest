function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}

exports = (function() {
    function LinkedList() {
        _classCallCheck(this, LinkedList);

        this.tail = null;
        this.head = null;
        this.size = 0;
    }

    _createClass(LinkedList, [
        {
            key: 'push',
            value: function push(val) {
                var node = new Node(val, this.tail, null, this);
                this.tail = node;
                this.head = this.head || node;
                this.size++;
                return this.size;
            }
        },
        {
            key: 'pop',
            value: function pop() {
                if (!this.tail) return;
                var node = this.tail;
                this.tail = node.prev;

                if (this.tail) {
                    this.tail.next = null;
                } else {
                    this.head = null;
                }

                this.size--;
                return node.value;
            }
        },
        {
            key: 'unshift',
            value: function unshift(val) {
                var node = new Node(val, null, this.head, this);
                this.head = node;
                this.tail = this.tail || node;
                this.size++;
                return this.size;
            }
        },
        {
            key: 'shift',
            value: function shift() {
                if (!this.head) return;
                var node = this.head;
                this.head = node.next;

                if (this.head) {
                    this.head.prev = null;
                } else {
                    this.tail = null;
                }

                this.size--;
                return node.value;
            }
        },
        {
            key: 'rmNode',
            value: function rmNode(node) {
                if (node.list !== this) {
                    throw Error('Node does not belong to this list');
                }

                var next = node.next,
                    prev = node.prev;

                if (next) {
                    next.prev = prev;
                }

                if (prev) {
                    prev.next = next;
                }

                if (node === this.head) {
                    this.head = next;
                }

                if (node === this.tail) {
                    this.tail = prev;
                }

                node.list = null;
                node.prev = null;
                node.next = null;
                this.size--;
            }
        },
        {
            key: 'forEach',
            value: function forEach(iterator, ctx) {
                ctx = arguments.length > 1 ? ctx : this;

                for (var i = 0, current = this.head; current !== null; i++) {
                    iterator.call(ctx, current.value, i, this);
                    current = current.next;
                }
            }
        },
        {
            key: 'toArr',
            value: function toArr() {
                var arr = new Array(this.size);

                for (var i = 0, current = this.head; current !== null; i++) {
                    arr[i] = current.value;
                    current = current.next;
                }

                return arr;
            }
        }
    ]);

    return LinkedList;
})();

var Node = (exports.Node = function Node(val, prev, next, list) {
    _classCallCheck(this, Node);

    this.value = val;
    this.list = list;

    if (prev) {
        prev.next = this;
        this.prev = prev;
    } else {
        this.prev = null;
    }

    if (next) {
        next.prev = this;
        this.next = next;
    } else {
        this.next = null;
    }
});

module.exports = exports;
